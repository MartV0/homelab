# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."seafile" = {
    image = "seafileltd/seafile-mc:12.0-latest";
    environment = {
      "DB_HOST" = "db";
      "DB_PASSWORD" = "%K(UvK2?!Olc{:FrB6uS";
      "DB_PORT" = "3306";
      "DB_ROOT_PASSWD" = "%K(UvK2?!Olc{:FrB6uS";
      "ENABLE_SEADOC" = "false";
      "INIT_SEAFILE_ADMIN_EMAIL" = "martijnvoordouw@gmail.com";
      "INIT_SEAFILE_ADMIN_PASSWORD" = "mNy$MBU9RpW?&e4j7Nr%F";
      "JWT_PRIVATE_KEY" = "wugnG32Oiw39QSYLxfXW1gTUhimMEU20KC6ZteXS";
      "NON_ROOT" = "false";
      "SEADOC_SERVER_URL" = "http://seafile.example.com/sdoc-server";
      "SEAFILE_MYSQL_DB_CCNET_DB_NAME" = "ccnet_db";
      "SEAFILE_MYSQL_DB_SEAFILE_DB_NAME" = "seafile_db";
      "SEAFILE_MYSQL_DB_SEAHUB_DB_NAME" = "seahub_db";
      "SEAFILE_SERVER_HOSTNAME" = "seafile.martijnv.com";
      "SEAFILE_SERVER_PROTOCOL" = "https";
      "SITE_ROOT" = "/";
      "TIME_ZONE" = "Etc/UTC";
    };
    environmentFiles = [
      "/home/martijn/.flake/services/seafile/seafile.env"
      "/run/agenix/seafile-secrets.env"
    ];
    volumes = [
      "/opt/seafile-data:/shared:rw"
    ];
    ports = [
      "8083:8083/tcp"
    ];
    labels = {
      "caddy" = "https://seafile.martijnv.com";
      "caddy.reverse_proxy" = "{{upstreams 80}}";
    };
    dependsOn = [
      "seafile-memcached"
      "seafile-mysql"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=seafile"
      "--network=seafile-net"
    ];
  };
  systemd.services."docker-seafile" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-seafile-net.service"
    ];
    requires = [
      "docker-network-seafile-net.service"
    ];
    partOf = [
      "docker-compose-seafile-root.target"
    ];
    wantedBy = [
      "docker-compose-seafile-root.target"
    ];
  };
  virtualisation.oci-containers.containers."seafile-memcached" = {
    image = "memcached:1.6.29";
    environmentFiles = [
      "/home/martijn/.flake/services/seafile/seafile.env"
      "/run/agenix/seafile-secrets.env"
    ];
    log-driver = "journald";
    extraOptions = [
      "--entrypoint=[\"memcached\", \"-m\", \"256\"]"
      "--network-alias=memcached"
      "--network=seafile-net"
    ];
  };
  systemd.services."docker-seafile-memcached" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-seafile-net.service"
    ];
    requires = [
      "docker-network-seafile-net.service"
    ];
    partOf = [
      "docker-compose-seafile-root.target"
    ];
    wantedBy = [
      "docker-compose-seafile-root.target"
    ];
  };
  virtualisation.oci-containers.containers."seafile-mysql" = {
    image = "mariadb:10.11";
    environment = {
      "MARIADB_AUTO_UPGRADE" = "1";
      "MYSQL_LOG_CONSOLE" = "true";
      "MYSQL_ROOT_PASSWORD" = "%K(UvK2?!Olc{:FrB6uS";
    };
    environmentFiles = [
      "/home/martijn/.flake/services/seafile/seafile.env"
      "/run/agenix/seafile-secrets.env"
    ];
    volumes = [
      "/opt/seafile-mysql/db:/var/lib/mysql:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=[\"/usr/local/bin/healthcheck.sh\", \"--connect\", \"--mariadbupgrade\", \"--innodb_initialized\"]"
      "--health-interval=20s"
      "--health-retries=10"
      "--health-start-period=30s"
      "--health-timeout=5s"
      "--network-alias=db"
      "--network=seafile-net"
    ];
  };
  systemd.services."docker-seafile-mysql" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-seafile-net.service"
    ];
    requires = [
      "docker-network-seafile-net.service"
    ];
    partOf = [
      "docker-compose-seafile-root.target"
    ];
    wantedBy = [
      "docker-compose-seafile-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-seafile-net" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f seafile-net";
    };
    script = ''
      docker network inspect seafile-net || docker network create seafile-net
    '';
    partOf = [ "docker-compose-seafile-root.target" ];
    wantedBy = [ "docker-compose-seafile-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-seafile-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
